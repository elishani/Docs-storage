{"version":3,"sources":["pages/HomePage.js","model/UserModel.js","pages/LoginPage.js","components/DocsNavbar.js","model/MenuModel.js","components/DocTreebeard.js","components/NewPdfModal.js","pages/DocsPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","this","activeUser","handleLogout","Jumbotron","Button","variant","href","Component","UserModel","parseModel","id","email","get","fname","lname","LoginPage","state","pwd","showInvalidLoginError","redirectToDocsPage","handleInputChange","bind","login","event","target","value","type","checked","name","setState","handleLogin","Parse","User","logIn","then","parseUser","user","console","log","catch","error","to","errorAlert","Alert","className","Form","Group","controlId","Label","Control","placeholder","onChange","vriant","block","onClick","React","DocsNavbar","docsLink","Nav","Link","signupLink","loginLink","logoutLink","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","MenuModel","parseMenu","parent","DocTreebreard","data","pdfFiles","onToggle","getPdfFiles","folder","Object","extend","query","Query","find","results","menu","map","toggled","children","i","length","j","push","folderTable","queryFolder","pdfStore","equalTo","node","cursor","active","assign","pdfList","pdfFile","_url","NewPdfModal","filePdf","file","undefined","URL","createPdf","handleFileChange","newFilePdf","files","createObjectURL","newPdf","pdf","handleNewPdf","handleClose","show","Modal","onHide","Header","closeButton","Title","Body","Row","Col","Image","src","fluid","Footer","DocsPage","showNewPdfModal","Container","App","exact","path","Boolean","window","location","hostname","match","serverURL","initialize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.467e4848.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport { Jumbotron, Button } from 'react-bootstrap';\r\n\r\nexport default class HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { activeUser, handleLogout } = this.props;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Jumbotron>\r\n                    <h1>Documents storage</h1>\r\n                    <p>\r\n                       One place for all your documents\r\n                    </p>\r\n                    <p>\r\n                        <Button variant=\"success\" href=\"#/login\">Login</Button>\r\n                    </p>\r\n                </Jumbotron>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","export default class UserModel {\r\n    constructor(parseModel) {\r\n        this.id = parseModel.id;\r\n        this.email = parseModel.get(\"email\");\r\n        this.fname = parseModel.get(\"fname\");\r\n        this.lname = parseModel.get(\"lname\");\r\n    }\r\n}","import React from 'react';\r\nimport './LoginPage.css';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Parse from 'parse';\r\nimport UserModel from '../model/UserModel'\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"elishani50@gmail.com\",\r\n            pwd: \"123\",\r\n\r\n            showInvalidLoginError: false,  \r\n            redirectToDocsPage: false\r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.login = this.login.bind(this)\r\n    }\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    login() {\r\n        const { handleLogin } = this.props;\r\n        const { email, pwd } = this.state;\r\n\r\n        Parse.User.logIn(email, pwd).then(parseUser => {\r\n            const user = new UserModel(parseUser);\r\n            console.log('Logged in user', user);\r\n\r\n            handleLogin(user);\r\n\r\n            this.setState({\r\n                redirectToDocsPage: true\r\n            });\r\n\r\n        }).catch(error => {\r\n            console.error('Error while logging in user', error);\r\n            this.setState({\r\n                showInvalidLoginError: true\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { email, pwd, showInvalidLoginError, redirectToDocsPage } = this.state\r\n\r\n        if (redirectToDocsPage){\r\n            return <Redirect to=\"/docs\"/>\r\n        }\r\n        \r\n        const errorAlert = showInvalidLoginError ? <Alert variant=\"danger\">Invalid email or password!</Alert> : null\r\n       \r\n        return (\r\n            <div>\r\n                <div className=\"p-login\">\r\n                    <div className=\"main\">\r\n                        <h1>Welcome to </h1>\r\n                        <h1>Documents Storage</h1>\r\n                        <p>or <Link to=\"/signup\">Create a new account</Link></p>\r\n                        {errorAlert}\r\n                        <Form>\r\n                            <Form.Group controlId=\"formBsicaEmail\">\r\n                                <Form.Label>Email adderess</Form.Label>\r\n                                <Form.Control name=\"email\" value={email}\r\n                                    type=\"email\" placeholder=\"Enter Email\" onChange={this.handleInputChange} />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBsicaPassword\">\r\n                                <Form.Label>Pssword</Form.Label>\r\n                                <Form.Control name=\"pwd\"  value={pwd}\r\n                                    type=\"Password\" placeholder=\"Password\" onChange={this.handleInputChange} />\r\n                            </Form.Group>\r\n                            <Button vriant=\"success\" type=\"button\" block onClick={this.login}>\r\n                                Login\r\n                            </Button>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LoginPage;","import React, { Component } from 'react'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\n\r\nclass DocsNavbar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { activeUser } = this.props;\r\n\r\n        const docsLink = activeUser ? <Nav.Link href=\"#/docs\">Docs</Nav.Link> : null;\r\n        const signupLink = !activeUser ? <Nav.Link href=\"#/signup\">Singup</Nav.Link> : null;\r\n        const loginLink = !activeUser ? <Nav.Link href=\"#/login\">Login</Nav.Link> : null;\r\n        const logoutLink = activeUser ? <Nav.Link href=\"#/\">Logout</Nav.Link> : null;\r\n\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand><h1>Documents Cluster</h1></Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    {docsLink}\r\n                </Nav>\r\n                <Nav className=\"ml-auto\">\r\n                    {signupLink}\r\n                    {loginLink}\r\n                    {logoutLink}  \r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DocsNavbar;","export default class MenuModel {\r\n    constructor(parseMenu){\r\n        this.id = parseMenu.id;\r\n        this.name = parseMenu.get(\"name\");\r\n        this.parent = parseMenu.get(\"parent\");\r\n    }   \r\n}","import React, { Component } from 'react';\r\nimport { Treebeard } from 'react-treebeard';\r\nimport Parse from 'parse';\r\nimport MenuModel from '../model/MenuModel'\r\nexport default class DocTreebreard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { data: {}, pdfFiles: [] }\r\n        this.onToggle = this.onToggle.bind(this);\r\n        this.getPdfFiles = this.getPdfFiles.bind(this);\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        const folder = Parse.Object.extend('folder');\r\n        const query = new Parse.Query(folder);\r\n        const results = await query.find();\r\n        const menu = results.map(parseMenu => new MenuModel(parseMenu));\r\n\r\n        let data = {\r\n            name: \"root\",\r\n            toggled: true,\r\n            children: []\r\n        }\r\n\r\n        for (let i = 0; i < menu.length; i++) {\r\n            if (!menu[i].parent) {\r\n                let folder = {\r\n                    name: menu[i].name,\r\n                    id: menu[i].id,\r\n                    children: []\r\n                }\r\n                for (let j = 0; j < menu.length; j++) {\r\n                    if (menu[j].parent === menu[i].id) {\r\n                        folder.children.push({\r\n                            name: menu[j].name,\r\n                            id: menu[j].id\r\n                        })\r\n                    }\r\n                }\r\n                data.children.push(folder);\r\n            }\r\n        }\r\n\r\n        this.setState({ data });\r\n    }\r\n\r\n    async getPdfFiles(parent) {\r\n        const folderTable = Parse.Object.extend('folder');\r\n        const queryFolder = new Parse.Query(folderTable);\r\n        const folder = await queryFolder.get(parent);\r\n\r\n        const pdfStore = Parse.Object.extend('pdfStore');\r\n        const query = new Parse.Query(pdfStore);\r\n        query.equalTo(\"parent\", folder);\r\n\r\n        const pdfFiles = await query.find();\r\n        this.setState({\r\n            pdfFiles: pdfFiles\r\n        })\r\n\r\n        console.log(pdfFiles);\r\n    }\r\n\r\n    onToggle(node, toggled) {\r\n        console.log(node);\r\n        const { cursor, data } = this.state;\r\n        if (cursor) {\r\n            this.setState(() => ({ cursor, active: false }));\r\n        }\r\n        node.active = true;\r\n        if (node.children) {\r\n            node.toggled = toggled;\r\n\r\n        } else {\r\n            this.getPdfFiles(node.id)\r\n        }\r\n        this.setState(() => ({ cursor: node, data: Object.assign({}, data) }));\r\n    }\r\n\r\n\r\n    render() {\r\n        const { data, pdfFiles } = this.state\r\n\r\n\r\n    \r\n        const pdfList = pdfFiles.map(pdfFile => \r\n            <div>\r\n                <a href={pdfFile.get(\"file\")._url} target=\"_blank\">{pdfFile.get(\"name\")}</a>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <Treebeard\r\n                    data={data}\r\n                    onToggle={this.onToggle}\r\n                />\r\n                {pdfList}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Modal, Button, Form, Row, Col, Image } from 'react-bootstrap';\r\n\r\nexport default class NewPdfModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            filePdf: {\r\n                file: undefined,\r\n                URL: undefined\r\n            }\r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.createPdf = this.createPdf.bind(this);\r\n        this.handleFileChange = this.handleFileChange.bind(this);\r\n    }\r\n\r\n    handleFileChange(event) {\r\n        let newFilePdf;\r\n        if (event.target.files[0]) {\r\n            newFilePdf = {\r\n                file: event.target.files[0],\r\n                URL: URL.createObjectURL(event.target.files[0])\r\n            }\r\n        } else {\r\n            newFilePdf = {\r\n                file: undefined,\r\n                URL: undefined\r\n            }\r\n        }\r\n\r\n\r\n        this.setState({filePdf: newFilePdf});        \r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    createPdf() {\r\n        const { name, filePdf } = this.state;\r\n        const newPdf = { name, pdf: filePdf.URL};\r\n        this.props.handleNewPdf(newPdf);\r\n        this.props.handleClose();\r\n        this.setState({\r\n            name: \"\",\r\n            pdf: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { show, handleClose } = this.props;\r\n        const { name,  filePdf } = this.state;\r\n\r\n        return (\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>New Pdf</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control name=\"name\" value={name}\r\n                                type=\"text\" placeholder=\"Enter PDF Name\" onChange={this.handleInputChange} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Pdf URL</Form.Label>\r\n                            <Row>\r\n                                <Col>\r\n                            <Form.Control type=\"file\" onChange={this.handleFileChange} />\r\n                                </Col>\r\n                                <Col>\r\n                                    <Image src={filePdf.URL} fluid/>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Cancel\r\n                </Button>\r\n                    <Button variant=\"success\" onClick={this.createPdf}>\r\n                        Create\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Container, Button } from 'react-bootstrap'\r\nimport DocsNavbar from '../components/DocsNavbar'\r\nimport DocTreebeard from '../components/DocTreebeard'\r\nimport { Redirect } from 'react-router-dom';\r\nimport './DocsPage.css'\r\nimport NewPdfModal from '../components/NewPdfModal'\r\n\r\nexport default class DocsPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showNewPdfModal: false\r\n    }\r\n\r\n    this.handleClose = this.handleClose.bind(this)\r\n    this.handleNewPdf = this.handleNewPdf.bind(this)\r\n  }\r\n\r\n  handleClose(){\r\n    this.setState({\r\n      showNewPdfModal: false\r\n    })\r\n  }\r\n\r\n    handleNewPdf(newPdf){\r\n      this.props.handleNewPdf(newPdf)\r\n    }\r\n\r\n\r\n  render() {\r\n    const { showNewPdfModal} = this.state\r\n    const { activeUser, handleLogout } = this.props\r\n    if (!activeUser) {\r\n      return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <DocsNavbar activeUser={activeUser} handleLogout={handleLogout} />\r\n        <Container>\r\n          <div className=\"docs-header\">\r\n            <h1>{activeUser.fname}'s Documents storage</h1>\r\n            <Button onClick={() => {this.setState({showNewPdfModal: true})}}>Add PDF</Button> \r\n          </div>\r\n          <div className=\"tree\">\r\n            <DocTreebeard activeUser={activeUser}/>\r\n          </div>\r\n        </Container>\r\n\r\n        <NewPdfModal show={showNewPdfModal} handleClose={this.handleClose} handleNewPdf={this.handleNewPdf} />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport HomePage from './pages/HomePage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport DocsPage from './pages/DocsPage';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeUser: null,\r\n    }\r\n\r\n    this.handleLogout = this.handleLogout.bind(this);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n  }\r\n\r\n  handleLogin(user){\r\n    this.setState({\r\n      activeUser: user\r\n    });\r\n  }\r\n\r\n  handleLogout(){\r\n    this.setState({\r\n      activeUser: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n  const { activeUser } = this.state;\r\n\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <HomePage activeUser={activeUser} handleLogout={this.handleLogout} />\r\n          </Route>\r\n          <Route exact path=\"/login\">\r\n            <LoginPage handleLogin={this.handleLogin}/>\r\n          </Route>\r\n          <Route exact path=\"/docs\">\r\n            <DocsPage activeUser={activeUser} handleLogout={this.handleLogout} />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Parse from 'parse'\r\n\r\nParse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\r\nParse.initialize(\r\n  'h2N3mnez0o8lx8d1wruJFKqMsapy0CCSmiGk0OO3', // This is your Application ID\r\n  '6SMd5BpVty1wZQIMt0rhG03L7INNABB36s9GduB7' // This is your Javascript key\r\n);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}